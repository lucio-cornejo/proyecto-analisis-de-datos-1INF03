```{r}
#| label: setup

library(spotifyr)
library(tidyverse)

# ::::::::::::
# Activate API
# ::::::::::::
id <- # tu id
secret <- # tu secret_id
Sys.setenv(SPOTIFY_CLIENT_ID = id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = secret)
access_token <- get_spotify_access_token()
```

```{r}
minima_popularidad <- 85

filtro_popularidad <- df %>%
  filter(popularity > 85) %>%
  select(
    popularity,
    id, name, artists, id_artists
  ) %>%
  group_by(artists) %>%
  filter(popularity == max(popularity)) %>%
  arrange(desc(popularity))  %>%
  as.data.frame()

View(filtro_popularidad)
```

```{r}
row <- 1

# :::::::::::::::::::::::::::::::::::::
# Get first artist id in column artists
# :::::::::::::::::::::::::::::::::::::
id_artists <- filtro_popularidad[row, "id_artists"]
id_artists

id_artist <- id_artists %>% 
  str_split(pattern = "'") %>%
  unlist() %>%
  head(2) %>%
  tail(1) 

id_artist

# :::::::::::::::::::::::::::::::::::::::
# Get first artist name in column artists
# :::::::::::::::::::::::::::::::::::::::
name_artists <- filtro_popularidad[row, "artists"]
name_artists

name_artist <- name_artists %>%
  str_split(pattern = "'") %>%
  unlist() %>%
  head(2) %>%
  tail(1) 

name_artist
```

## Example for Doja Cat's top tracks in Spotify

```{.r}
#| label: caso-particular

id_artists <- "['5cj0lLjcoR7YOSnhnX0Po5']"
id_artist <- "5cj0lLjcoR7YOSnhnX0Po5"

name_artists <- "['Doja Cat']"
name_artist <- "Doja Cat"
```

```{r}
#| label: API-call-1
top_tracks_info <- get_artist_top_tracks(id_artist)
```

```{r}
View(top_tracks_info)
```

```{r}
# ::::::::::::::::::::::::::::::::::
# Only extract columns already in df
# ::::::::::::::::::::::::::::::::::

# Extracted data has no "release_date" 
# column (df does), but "album.release_date".
# That may be a problem if df contains songs
# which are not included in any album.
temp <- c(colnames(top_tracks_info), "release_date")

missing_top_tracks_info <- top_tracks_info %>%
  rename(release_date = album.release_date) %>%
  select(Filter(
    function(col) {
      col %in% colnames(df)
    }
    , temp
  )) %>%
  select(-c(artists, duration_ms)) %>%
  mutate(
    artists = name_artists, 
    id_artists = id_artists
  ) %>%
  as.data.frame()

View(missing_top_tracks_info)
```


```{r}
# :::::::::::::::::::::::::::::
# Obtain id of tracks extracted
# :::::::::::::::::::::::::::::
top_tracks_ids <- top_tracks_info %>%
  pull(uri) %>%
  str_sub(start = 15, end = -1L) 

top_tracks_ids
```

```{r}
#| label: API-call-2
features <- get_track_audio_features(top_tracks_ids)
```

```{r}
# :::::::::::::::::::::::::::::::::::::
# Only extract features to append in df
# :::::::::::::::::::::::::::::::::::::
tracks_to_append <- features %>%
  select(Filter(
    function(col) {
      col %in% colnames(df)
    }
    , colnames(features)
  )) %>%
  as.data.frame()

View(tracks_to_append)
```

```{r}
# :::::::::::::::::::::::::::::::
# Obtain data frame which then 
# will be directly joined with df
# :::::::::::::::::::::::::::::::
data_to_join <- left_join(
  tracks_to_append,
  missing_top_tracks_info,
  by = "id"
) %>%
  # Reorder columns as to match df's columns
  select(colnames(df)) %>%
  as.data.frame()

View(data_to_join)
```
